// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `udp-up.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:MsgUpUserJoinWorldInstance)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpUserJoinWorldInstance {
    // message fields
    // @@protoc_insertion_point(field:MsgUpUserJoinWorldInstance.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:MsgUpUserJoinWorldInstance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUpUserJoinWorldInstance {
    fn default() -> &'a MsgUpUserJoinWorldInstance {
        <MsgUpUserJoinWorldInstance as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpUserJoinWorldInstance {
    pub fn new() -> MsgUpUserJoinWorldInstance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MsgUpUserJoinWorldInstance| { &m.id },
            |m: &mut MsgUpUserJoinWorldInstance| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUpUserJoinWorldInstance>(
            "MsgUpUserJoinWorldInstance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUpUserJoinWorldInstance {
    const NAME: &'static str = "MsgUpUserJoinWorldInstance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUpUserJoinWorldInstance {
        MsgUpUserJoinWorldInstance::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUpUserJoinWorldInstance {
        static instance: MsgUpUserJoinWorldInstance = MsgUpUserJoinWorldInstance {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUpUserJoinWorldInstance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUpUserJoinWorldInstance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUpUserJoinWorldInstance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpUserJoinWorldInstance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MsgUp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUp {
    // message fields
    // @@protoc_insertion_point(field:MsgUp._type)
    pub _type: ::protobuf::EnumOrUnknown<MsgUpType>,
    // @@protoc_insertion_point(field:MsgUp.player_move)
    pub player_move: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:MsgUp.player_teleport)
    pub player_teleport: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:MsgUp.player_throw_projectile)
    pub player_throw_projectile: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:MsgUp.player_throw_frozen_orb)
    pub player_throw_frozen_orb: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:MsgUp.user_connect_username)
    pub user_connect_username: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:MsgUp.user_join_world_instance)
    pub user_join_world_instance: ::protobuf::MessageField<MsgUpUserJoinWorldInstance>,
    // special fields
    // @@protoc_insertion_point(special_field:MsgUp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUp {
    fn default() -> &'a MsgUp {
        <MsgUp as ::protobuf::Message>::default_instance()
    }
}

impl MsgUp {
    pub fn new() -> MsgUp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_type",
            |m: &MsgUp| { &m._type },
            |m: &mut MsgUp| { &mut m._type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "player_move",
            |m: &MsgUp| { &m.player_move },
            |m: &mut MsgUp| { &mut m.player_move },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "player_teleport",
            |m: &MsgUp| { &m.player_teleport },
            |m: &mut MsgUp| { &mut m.player_teleport },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "player_throw_projectile",
            |m: &MsgUp| { &m.player_throw_projectile },
            |m: &mut MsgUp| { &mut m.player_throw_projectile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "player_throw_frozen_orb",
            |m: &MsgUp| { &m.player_throw_frozen_orb },
            |m: &mut MsgUp| { &mut m.player_throw_frozen_orb },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "user_connect_username",
            |m: &MsgUp| { &m.user_connect_username },
            |m: &mut MsgUp| { &mut m.user_connect_username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MsgUpUserJoinWorldInstance>(
            "user_join_world_instance",
            |m: &MsgUp| { &m.user_join_world_instance },
            |m: &mut MsgUp| { &mut m.user_join_world_instance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUp>(
            "MsgUp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUp {
    const NAME: &'static str = "MsgUp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self._type = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_move)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_teleport)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_throw_projectile)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_throw_frozen_orb)?;
                },
                50 => {
                    self.user_connect_username = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.user_join_world_instance)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self._type != ::protobuf::EnumOrUnknown::new(MsgUpType::GAME_PAUSE) {
            my_size += ::protobuf::rt::int32_size(1, self._type.value());
        }
        if let Some(v) = self.player_move.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_teleport.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_throw_projectile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_throw_frozen_orb.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.user_connect_username.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.user_join_world_instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self._type != ::protobuf::EnumOrUnknown::new(MsgUpType::GAME_PAUSE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self._type))?;
        }
        if let Some(v) = self.player_move.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.player_teleport.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.player_throw_projectile.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.player_throw_frozen_orb.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.user_connect_username.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.user_join_world_instance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUp {
        MsgUp::new()
    }

    fn clear(&mut self) {
        self._type = ::protobuf::EnumOrUnknown::new(MsgUpType::GAME_PAUSE);
        self.player_move.clear();
        self.player_teleport.clear();
        self.player_throw_projectile.clear();
        self.player_throw_frozen_orb.clear();
        self.user_connect_username = ::std::option::Option::None;
        self.user_join_world_instance.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUp {
        static instance: MsgUp = MsgUp {
            _type: ::protobuf::EnumOrUnknown::from_i32(0),
            player_move: ::protobuf::MessageField::none(),
            player_teleport: ::protobuf::MessageField::none(),
            player_throw_projectile: ::protobuf::MessageField::none(),
            player_throw_frozen_orb: ::protobuf::MessageField::none(),
            user_connect_username: ::std::option::Option::None,
            user_join_world_instance: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MsgUpWrapper)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpWrapper {
    // message fields
    // @@protoc_insertion_point(field:MsgUpWrapper.messages)
    pub messages: ::std::vec::Vec<MsgUp>,
    // special fields
    // @@protoc_insertion_point(special_field:MsgUpWrapper.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUpWrapper {
    fn default() -> &'a MsgUpWrapper {
        <MsgUpWrapper as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpWrapper {
    pub fn new() -> MsgUpWrapper {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &MsgUpWrapper| { &m.messages },
            |m: &mut MsgUpWrapper| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUpWrapper>(
            "MsgUpWrapper",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUpWrapper {
    const NAME: &'static str = "MsgUpWrapper";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.messages.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUpWrapper {
        MsgUpWrapper::new()
    }

    fn clear(&mut self) {
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUpWrapper {
        static instance: MsgUpWrapper = MsgUpWrapper {
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUpWrapper {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUpWrapper").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUpWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpWrapper {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:MsgUpType)
pub enum MsgUpType {
    // @@protoc_insertion_point(enum_value:MsgUpType.GAME_PAUSE)
    GAME_PAUSE = 0,
    // @@protoc_insertion_point(enum_value:MsgUpType.PLAYER_INIT)
    PLAYER_INIT = 1,
    // @@protoc_insertion_point(enum_value:MsgUpType.PLAYER_MOVE)
    PLAYER_MOVE = 2,
    // @@protoc_insertion_point(enum_value:MsgUpType.PLAYER_TELEPORT)
    PLAYER_TELEPORT = 3,
    // @@protoc_insertion_point(enum_value:MsgUpType.PLAYER_THROW_PROJECTILE)
    PLAYER_THROW_PROJECTILE = 4,
    // @@protoc_insertion_point(enum_value:MsgUpType.PLAYER_THROW_FROZEN_ORB)
    PLAYER_THROW_FROZEN_ORB = 5,
    // @@protoc_insertion_point(enum_value:MsgUpType.PLAYER_MELEE_ATTACK)
    PLAYER_MELEE_ATTACK = 6,
    // @@protoc_insertion_point(enum_value:MsgUpType.SETTINGS_TOGGLE_ENEMIES)
    SETTINGS_TOGGLE_ENEMIES = 7,
    // @@protoc_insertion_point(enum_value:MsgUpType.USER_CONNECT)
    USER_CONNECT = 8,
    // @@protoc_insertion_point(enum_value:MsgUpType.USER_DISCONNECT)
    USER_DISCONNECT = 9,
    // @@protoc_insertion_point(enum_value:MsgUpType.USER_CREATE_WORLD_INSTANCE)
    USER_CREATE_WORLD_INSTANCE = 10,
    // @@protoc_insertion_point(enum_value:MsgUpType.USER_JOIN_WOLD_INSTANCE)
    USER_JOIN_WOLD_INSTANCE = 11,
    // @@protoc_insertion_point(enum_value:MsgUpType.USER_LEAVE_WORLD_INSTANCE)
    USER_LEAVE_WORLD_INSTANCE = 12,
}

impl ::protobuf::Enum for MsgUpType {
    const NAME: &'static str = "MsgUpType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MsgUpType> {
        match value {
            0 => ::std::option::Option::Some(MsgUpType::GAME_PAUSE),
            1 => ::std::option::Option::Some(MsgUpType::PLAYER_INIT),
            2 => ::std::option::Option::Some(MsgUpType::PLAYER_MOVE),
            3 => ::std::option::Option::Some(MsgUpType::PLAYER_TELEPORT),
            4 => ::std::option::Option::Some(MsgUpType::PLAYER_THROW_PROJECTILE),
            5 => ::std::option::Option::Some(MsgUpType::PLAYER_THROW_FROZEN_ORB),
            6 => ::std::option::Option::Some(MsgUpType::PLAYER_MELEE_ATTACK),
            7 => ::std::option::Option::Some(MsgUpType::SETTINGS_TOGGLE_ENEMIES),
            8 => ::std::option::Option::Some(MsgUpType::USER_CONNECT),
            9 => ::std::option::Option::Some(MsgUpType::USER_DISCONNECT),
            10 => ::std::option::Option::Some(MsgUpType::USER_CREATE_WORLD_INSTANCE),
            11 => ::std::option::Option::Some(MsgUpType::USER_JOIN_WOLD_INSTANCE),
            12 => ::std::option::Option::Some(MsgUpType::USER_LEAVE_WORLD_INSTANCE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MsgUpType> {
        match str {
            "GAME_PAUSE" => ::std::option::Option::Some(MsgUpType::GAME_PAUSE),
            "PLAYER_INIT" => ::std::option::Option::Some(MsgUpType::PLAYER_INIT),
            "PLAYER_MOVE" => ::std::option::Option::Some(MsgUpType::PLAYER_MOVE),
            "PLAYER_TELEPORT" => ::std::option::Option::Some(MsgUpType::PLAYER_TELEPORT),
            "PLAYER_THROW_PROJECTILE" => ::std::option::Option::Some(MsgUpType::PLAYER_THROW_PROJECTILE),
            "PLAYER_THROW_FROZEN_ORB" => ::std::option::Option::Some(MsgUpType::PLAYER_THROW_FROZEN_ORB),
            "PLAYER_MELEE_ATTACK" => ::std::option::Option::Some(MsgUpType::PLAYER_MELEE_ATTACK),
            "SETTINGS_TOGGLE_ENEMIES" => ::std::option::Option::Some(MsgUpType::SETTINGS_TOGGLE_ENEMIES),
            "USER_CONNECT" => ::std::option::Option::Some(MsgUpType::USER_CONNECT),
            "USER_DISCONNECT" => ::std::option::Option::Some(MsgUpType::USER_DISCONNECT),
            "USER_CREATE_WORLD_INSTANCE" => ::std::option::Option::Some(MsgUpType::USER_CREATE_WORLD_INSTANCE),
            "USER_JOIN_WOLD_INSTANCE" => ::std::option::Option::Some(MsgUpType::USER_JOIN_WOLD_INSTANCE),
            "USER_LEAVE_WORLD_INSTANCE" => ::std::option::Option::Some(MsgUpType::USER_LEAVE_WORLD_INSTANCE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MsgUpType] = &[
        MsgUpType::GAME_PAUSE,
        MsgUpType::PLAYER_INIT,
        MsgUpType::PLAYER_MOVE,
        MsgUpType::PLAYER_TELEPORT,
        MsgUpType::PLAYER_THROW_PROJECTILE,
        MsgUpType::PLAYER_THROW_FROZEN_ORB,
        MsgUpType::PLAYER_MELEE_ATTACK,
        MsgUpType::SETTINGS_TOGGLE_ENEMIES,
        MsgUpType::USER_CONNECT,
        MsgUpType::USER_DISCONNECT,
        MsgUpType::USER_CREATE_WORLD_INSTANCE,
        MsgUpType::USER_JOIN_WOLD_INSTANCE,
        MsgUpType::USER_LEAVE_WORLD_INSTANCE,
    ];
}

impl ::protobuf::EnumFull for MsgUpType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MsgUpType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MsgUpType {
    fn default() -> Self {
        MsgUpType::GAME_PAUSE
    }
}

impl MsgUpType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MsgUpType>("MsgUpType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cudp-up.proto\x1a\x0ccommon.proto\",\n\x1aMsgUpUserJoinWorldInstanc\
    e\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\xbc\x04\n\x05MsgUp\x12\x1f\
    \n\x05_type\x18\x01\x20\x01(\x0e2\n.MsgUpTypeR\x04Type\x12,\n\x0bplayer_\
    move\x18\x02\x20\x01(\x0b2\x06.PointH\0R\nplayerMove\x88\x01\x01\x124\n\
    \x0fplayer_teleport\x18\x03\x20\x01(\x0b2\x06.PointH\x01R\x0eplayerTelep\
    ort\x88\x01\x01\x12C\n\x17player_throw_projectile\x18\x04\x20\x01(\x0b2\
    \x06.PointH\x02R\x15playerThrowProjectile\x88\x01\x01\x12B\n\x17player_t\
    hrow_frozen_orb\x18\x05\x20\x01(\x0b2\x06.PointH\x03R\x14playerThrowFroz\
    enOrb\x88\x01\x01\x127\n\x15user_connect_username\x18\x06\x20\x01(\tH\
    \x04R\x13userConnectUsername\x88\x01\x01\x12Y\n\x18user_join_world_insta\
    nce\x18\x07\x20\x01(\x0b2\x1b.MsgUpUserJoinWorldInstanceH\x05R\x15userJo\
    inWorldInstance\x88\x01\x01B\x0e\n\x0c_player_moveB\x12\n\x10_player_tel\
    eportB\x1a\n\x18_player_throw_projectileB\x1a\n\x18_player_throw_frozen_\
    orbB\x18\n\x16_user_connect_usernameB\x1b\n\x19_user_join_world_instance\
    \"2\n\x0cMsgUpWrapper\x12\"\n\x08messages\x18\x01\x20\x03(\x0b2\x06.MsgU\
    pR\x08messages*\xc5\x02\n\tMsgUpType\x12\x0e\n\nGAME_PAUSE\x10\0\x12\x0f\
    \n\x0bPLAYER_INIT\x10\x01\x12\x0f\n\x0bPLAYER_MOVE\x10\x02\x12\x13\n\x0f\
    PLAYER_TELEPORT\x10\x03\x12\x1b\n\x17PLAYER_THROW_PROJECTILE\x10\x04\x12\
    \x1b\n\x17PLAYER_THROW_FROZEN_ORB\x10\x05\x12\x17\n\x13PLAYER_MELEE_ATTA\
    CK\x10\x06\x12\x1b\n\x17SETTINGS_TOGGLE_ENEMIES\x10\x07\x12\x10\n\x0cUSE\
    R_CONNECT\x10\x08\x12\x13\n\x0fUSER_DISCONNECT\x10\t\x12\x1e\n\x1aUSER_C\
    REATE_WORLD_INSTANCE\x10\n\x12\x1b\n\x17USER_JOIN_WOLD_INSTANCE\x10\x0b\
    \x12\x1d\n\x19USER_LEAVE_WORLD_INSTANCE\x10\x0cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(MsgUpUserJoinWorldInstance::generated_message_descriptor_data());
            messages.push(MsgUp::generated_message_descriptor_data());
            messages.push(MsgUpWrapper::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MsgUpType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
