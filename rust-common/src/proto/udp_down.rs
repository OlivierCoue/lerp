// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `udp-down.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:UdpMsgDownGameEntityUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpMsgDownGameEntityUpdate {
    // message fields
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.id)
    pub id: u32,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.object_type)
    pub object_type: ::protobuf::EnumOrUnknown<super::common::GameEntityBaseType>,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.location_current)
    pub location_current: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.location_target_queue)
    pub location_target_queue: ::std::vec::Vec<super::common::Point>,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.velocity_speed)
    pub velocity_speed: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.collider_dmg_in_rect)
    pub collider_dmg_in_rect: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.collider_mvt_rect)
    pub collider_mvt_rect: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.health_current)
    pub health_current: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.is_self)
    pub is_self: bool,
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityUpdate.cast)
    pub cast: ::protobuf::MessageField<UdpCast>,
    // special fields
    // @@protoc_insertion_point(special_field:UdpMsgDownGameEntityUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpMsgDownGameEntityUpdate {
    fn default() -> &'a UdpMsgDownGameEntityUpdate {
        <UdpMsgDownGameEntityUpdate as ::protobuf::Message>::default_instance()
    }
}

impl UdpMsgDownGameEntityUpdate {
    pub fn new() -> UdpMsgDownGameEntityUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UdpMsgDownGameEntityUpdate| { &m.id },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "object_type",
            |m: &UdpMsgDownGameEntityUpdate| { &m.object_type },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.object_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "location_current",
            |m: &UdpMsgDownGameEntityUpdate| { &m.location_current },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.location_current },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "location_target_queue",
            |m: &UdpMsgDownGameEntityUpdate| { &m.location_target_queue },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.location_target_queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "velocity_speed",
            |m: &UdpMsgDownGameEntityUpdate| { &m.velocity_speed },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.velocity_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "collider_dmg_in_rect",
            |m: &UdpMsgDownGameEntityUpdate| { &m.collider_dmg_in_rect },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.collider_dmg_in_rect },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "collider_mvt_rect",
            |m: &UdpMsgDownGameEntityUpdate| { &m.collider_mvt_rect },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.collider_mvt_rect },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "health_current",
            |m: &UdpMsgDownGameEntityUpdate| { &m.health_current },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.health_current },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_self",
            |m: &UdpMsgDownGameEntityUpdate| { &m.is_self },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.is_self },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UdpCast>(
            "cast",
            |m: &UdpMsgDownGameEntityUpdate| { &m.cast },
            |m: &mut UdpMsgDownGameEntityUpdate| { &mut m.cast },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpMsgDownGameEntityUpdate>(
            "UdpMsgDownGameEntityUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpMsgDownGameEntityUpdate {
    const NAME: &'static str = "UdpMsgDownGameEntityUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.object_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.location_current)?;
                },
                34 => {
                    self.location_target_queue.push(is.read_message()?);
                },
                45 => {
                    self.velocity_speed = ::std::option::Option::Some(is.read_float()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.collider_dmg_in_rect)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.collider_mvt_rect)?;
                },
                64 => {
                    self.health_current = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.is_self = is.read_bool()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cast)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.object_type != ::protobuf::EnumOrUnknown::new(super::common::GameEntityBaseType::CHARACTER) {
            my_size += ::protobuf::rt::int32_size(2, self.object_type.value());
        }
        if let Some(v) = self.location_current.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.location_target_queue {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.velocity_speed {
            my_size += 1 + 4;
        }
        if let Some(v) = self.collider_dmg_in_rect.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.collider_mvt_rect.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.health_current {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if self.is_self != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.cast.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.object_type != ::protobuf::EnumOrUnknown::new(super::common::GameEntityBaseType::CHARACTER) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.object_type))?;
        }
        if let Some(v) = self.location_current.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.location_target_queue {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.velocity_speed {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.collider_dmg_in_rect.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.collider_mvt_rect.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.health_current {
            os.write_uint32(8, v)?;
        }
        if self.is_self != false {
            os.write_bool(9, self.is_self)?;
        }
        if let Some(v) = self.cast.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpMsgDownGameEntityUpdate {
        UdpMsgDownGameEntityUpdate::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.object_type = ::protobuf::EnumOrUnknown::new(super::common::GameEntityBaseType::CHARACTER);
        self.location_current.clear();
        self.location_target_queue.clear();
        self.velocity_speed = ::std::option::Option::None;
        self.collider_dmg_in_rect.clear();
        self.collider_mvt_rect.clear();
        self.health_current = ::std::option::Option::None;
        self.is_self = false;
        self.cast.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpMsgDownGameEntityUpdate {
        static instance: UdpMsgDownGameEntityUpdate = UdpMsgDownGameEntityUpdate {
            id: 0,
            object_type: ::protobuf::EnumOrUnknown::from_i32(0),
            location_current: ::protobuf::MessageField::none(),
            location_target_queue: ::std::vec::Vec::new(),
            velocity_speed: ::std::option::Option::None,
            collider_dmg_in_rect: ::protobuf::MessageField::none(),
            collider_mvt_rect: ::protobuf::MessageField::none(),
            health_current: ::std::option::Option::None,
            is_self: false,
            cast: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpMsgDownGameEntityUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpMsgDownGameEntityUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpMsgDownGameEntityUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpMsgDownGameEntityUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UdpCast)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpCast {
    // message fields
    // @@protoc_insertion_point(field:UdpCast.spell)
    pub spell: ::protobuf::EnumOrUnknown<super::common::UdpSpell>,
    // @@protoc_insertion_point(field:UdpCast.target)
    pub target: ::protobuf::MessageField<super::common::Point>,
    // @@protoc_insertion_point(field:UdpCast.duration)
    pub duration: u32,
    // special fields
    // @@protoc_insertion_point(special_field:UdpCast.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpCast {
    fn default() -> &'a UdpCast {
        <UdpCast as ::protobuf::Message>::default_instance()
    }
}

impl UdpCast {
    pub fn new() -> UdpCast {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spell",
            |m: &UdpCast| { &m.spell },
            |m: &mut UdpCast| { &mut m.spell },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Point>(
            "target",
            |m: &UdpCast| { &m.target },
            |m: &mut UdpCast| { &mut m.target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "duration",
            |m: &UdpCast| { &m.duration },
            |m: &mut UdpCast| { &mut m.duration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpCast>(
            "UdpCast",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpCast {
    const NAME: &'static str = "UdpCast";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.spell = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target)?;
                },
                24 => {
                    self.duration = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.spell != ::protobuf::EnumOrUnknown::new(super::common::UdpSpell::SPELL_PROJECTILE) {
            my_size += ::protobuf::rt::int32_size(1, self.spell.value());
        }
        if let Some(v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.duration != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.duration);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.spell != ::protobuf::EnumOrUnknown::new(super::common::UdpSpell::SPELL_PROJECTILE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.spell))?;
        }
        if let Some(v) = self.target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.duration != 0 {
            os.write_uint32(3, self.duration)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpCast {
        UdpCast::new()
    }

    fn clear(&mut self) {
        self.spell = ::protobuf::EnumOrUnknown::new(super::common::UdpSpell::SPELL_PROJECTILE);
        self.target.clear();
        self.duration = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpCast {
        static instance: UdpCast = UdpCast {
            spell: ::protobuf::EnumOrUnknown::from_i32(0),
            target: ::protobuf::MessageField::none(),
            duration: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpCast {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpCast").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpCast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpCast {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UdpMsgDownGameEntityRemoved)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpMsgDownGameEntityRemoved {
    // message fields
    // @@protoc_insertion_point(field:UdpMsgDownGameEntityRemoved.id)
    pub id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:UdpMsgDownGameEntityRemoved.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpMsgDownGameEntityRemoved {
    fn default() -> &'a UdpMsgDownGameEntityRemoved {
        <UdpMsgDownGameEntityRemoved as ::protobuf::Message>::default_instance()
    }
}

impl UdpMsgDownGameEntityRemoved {
    pub fn new() -> UdpMsgDownGameEntityRemoved {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UdpMsgDownGameEntityRemoved| { &m.id },
            |m: &mut UdpMsgDownGameEntityRemoved| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpMsgDownGameEntityRemoved>(
            "UdpMsgDownGameEntityRemoved",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpMsgDownGameEntityRemoved {
    const NAME: &'static str = "UdpMsgDownGameEntityRemoved";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpMsgDownGameEntityRemoved {
        UdpMsgDownGameEntityRemoved::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpMsgDownGameEntityRemoved {
        static instance: UdpMsgDownGameEntityRemoved = UdpMsgDownGameEntityRemoved {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpMsgDownGameEntityRemoved {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpMsgDownGameEntityRemoved").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpMsgDownGameEntityRemoved {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpMsgDownGameEntityRemoved {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UdpMsgDownUserConnectFailed)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpMsgDownUserConnectFailed {
    // message fields
    // @@protoc_insertion_point(field:UdpMsgDownUserConnectFailed.error_message)
    pub error_message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:UdpMsgDownUserConnectFailed.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpMsgDownUserConnectFailed {
    fn default() -> &'a UdpMsgDownUserConnectFailed {
        <UdpMsgDownUserConnectFailed as ::protobuf::Message>::default_instance()
    }
}

impl UdpMsgDownUserConnectFailed {
    pub fn new() -> UdpMsgDownUserConnectFailed {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error_message",
            |m: &UdpMsgDownUserConnectFailed| { &m.error_message },
            |m: &mut UdpMsgDownUserConnectFailed| { &mut m.error_message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpMsgDownUserConnectFailed>(
            "UdpMsgDownUserConnectFailed",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpMsgDownUserConnectFailed {
    const NAME: &'static str = "UdpMsgDownUserConnectFailed";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.error_message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.error_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.error_message.is_empty() {
            os.write_string(1, &self.error_message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpMsgDownUserConnectFailed {
        UdpMsgDownUserConnectFailed::new()
    }

    fn clear(&mut self) {
        self.error_message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpMsgDownUserConnectFailed {
        static instance: UdpMsgDownUserConnectFailed = UdpMsgDownUserConnectFailed {
            error_message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpMsgDownUserConnectFailed {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpMsgDownUserConnectFailed").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpMsgDownUserConnectFailed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpMsgDownUserConnectFailed {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UdpMsgDownUserCreateWorldInstanceSuccess)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpMsgDownUserCreateWorldInstanceSuccess {
    // message fields
    // @@protoc_insertion_point(field:UdpMsgDownUserCreateWorldInstanceSuccess.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:UdpMsgDownUserCreateWorldInstanceSuccess.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpMsgDownUserCreateWorldInstanceSuccess {
    fn default() -> &'a UdpMsgDownUserCreateWorldInstanceSuccess {
        <UdpMsgDownUserCreateWorldInstanceSuccess as ::protobuf::Message>::default_instance()
    }
}

impl UdpMsgDownUserCreateWorldInstanceSuccess {
    pub fn new() -> UdpMsgDownUserCreateWorldInstanceSuccess {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UdpMsgDownUserCreateWorldInstanceSuccess| { &m.id },
            |m: &mut UdpMsgDownUserCreateWorldInstanceSuccess| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpMsgDownUserCreateWorldInstanceSuccess>(
            "UdpMsgDownUserCreateWorldInstanceSuccess",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpMsgDownUserCreateWorldInstanceSuccess {
    const NAME: &'static str = "UdpMsgDownUserCreateWorldInstanceSuccess";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpMsgDownUserCreateWorldInstanceSuccess {
        UdpMsgDownUserCreateWorldInstanceSuccess::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpMsgDownUserCreateWorldInstanceSuccess {
        static instance: UdpMsgDownUserCreateWorldInstanceSuccess = UdpMsgDownUserCreateWorldInstanceSuccess {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpMsgDownUserCreateWorldInstanceSuccess {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpMsgDownUserCreateWorldInstanceSuccess").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpMsgDownUserCreateWorldInstanceSuccess {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpMsgDownUserCreateWorldInstanceSuccess {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UdpMsgDownAreaInit)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpMsgDownAreaInit {
    // message fields
    // @@protoc_insertion_point(field:UdpMsgDownAreaInit.width)
    pub width: f32,
    // @@protoc_insertion_point(field:UdpMsgDownAreaInit.height)
    pub height: f32,
    // @@protoc_insertion_point(field:UdpMsgDownAreaInit.walkable_x)
    pub walkable_x: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:UdpMsgDownAreaInit.walkable_y)
    pub walkable_y: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:UdpMsgDownAreaInit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpMsgDownAreaInit {
    fn default() -> &'a UdpMsgDownAreaInit {
        <UdpMsgDownAreaInit as ::protobuf::Message>::default_instance()
    }
}

impl UdpMsgDownAreaInit {
    pub fn new() -> UdpMsgDownAreaInit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &UdpMsgDownAreaInit| { &m.width },
            |m: &mut UdpMsgDownAreaInit| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &UdpMsgDownAreaInit| { &m.height },
            |m: &mut UdpMsgDownAreaInit| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "walkable_x",
            |m: &UdpMsgDownAreaInit| { &m.walkable_x },
            |m: &mut UdpMsgDownAreaInit| { &mut m.walkable_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "walkable_y",
            |m: &UdpMsgDownAreaInit| { &m.walkable_y },
            |m: &mut UdpMsgDownAreaInit| { &mut m.walkable_y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpMsgDownAreaInit>(
            "UdpMsgDownAreaInit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpMsgDownAreaInit {
    const NAME: &'static str = "UdpMsgDownAreaInit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.width = is.read_float()?;
                },
                21 => {
                    self.height = is.read_float()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.walkable_x)?;
                },
                24 => {
                    self.walkable_x.push(is.read_uint32()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.walkable_y)?;
                },
                32 => {
                    self.walkable_y.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.width != 0. {
            my_size += 1 + 4;
        }
        if self.height != 0. {
            my_size += 1 + 4;
        }
        for value in &self.walkable_x {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        for value in &self.walkable_y {
            my_size += ::protobuf::rt::uint32_size(4, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.width != 0. {
            os.write_float(1, self.width)?;
        }
        if self.height != 0. {
            os.write_float(2, self.height)?;
        }
        for v in &self.walkable_x {
            os.write_uint32(3, *v)?;
        };
        for v in &self.walkable_y {
            os.write_uint32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpMsgDownAreaInit {
        UdpMsgDownAreaInit::new()
    }

    fn clear(&mut self) {
        self.width = 0.;
        self.height = 0.;
        self.walkable_x.clear();
        self.walkable_y.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpMsgDownAreaInit {
        static instance: UdpMsgDownAreaInit = UdpMsgDownAreaInit {
            width: 0.,
            height: 0.,
            walkable_x: ::std::vec::Vec::new(),
            walkable_y: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpMsgDownAreaInit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpMsgDownAreaInit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpMsgDownAreaInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpMsgDownAreaInit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UdpMsgDown)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpMsgDown {
    // message fields
    // @@protoc_insertion_point(field:UdpMsgDown._type)
    pub _type: ::protobuf::EnumOrUnknown<UdpMsgDownType>,
    // @@protoc_insertion_point(field:UdpMsgDown.game_entity_update)
    pub game_entity_update: ::protobuf::MessageField<UdpMsgDownGameEntityUpdate>,
    // @@protoc_insertion_point(field:UdpMsgDown.game_entity_removed)
    pub game_entity_removed: ::protobuf::MessageField<UdpMsgDownGameEntityRemoved>,
    // @@protoc_insertion_point(field:UdpMsgDown.user_connect_failed)
    pub user_connect_failed: ::protobuf::MessageField<UdpMsgDownUserConnectFailed>,
    // @@protoc_insertion_point(field:UdpMsgDown.user_create_world_instance_success)
    pub user_create_world_instance_success: ::protobuf::MessageField<UdpMsgDownUserCreateWorldInstanceSuccess>,
    // @@protoc_insertion_point(field:UdpMsgDown.area_init)
    pub area_init: ::protobuf::MessageField<UdpMsgDownAreaInit>,
    // special fields
    // @@protoc_insertion_point(special_field:UdpMsgDown.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpMsgDown {
    fn default() -> &'a UdpMsgDown {
        <UdpMsgDown as ::protobuf::Message>::default_instance()
    }
}

impl UdpMsgDown {
    pub fn new() -> UdpMsgDown {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_type",
            |m: &UdpMsgDown| { &m._type },
            |m: &mut UdpMsgDown| { &mut m._type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UdpMsgDownGameEntityUpdate>(
            "game_entity_update",
            |m: &UdpMsgDown| { &m.game_entity_update },
            |m: &mut UdpMsgDown| { &mut m.game_entity_update },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UdpMsgDownGameEntityRemoved>(
            "game_entity_removed",
            |m: &UdpMsgDown| { &m.game_entity_removed },
            |m: &mut UdpMsgDown| { &mut m.game_entity_removed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UdpMsgDownUserConnectFailed>(
            "user_connect_failed",
            |m: &UdpMsgDown| { &m.user_connect_failed },
            |m: &mut UdpMsgDown| { &mut m.user_connect_failed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UdpMsgDownUserCreateWorldInstanceSuccess>(
            "user_create_world_instance_success",
            |m: &UdpMsgDown| { &m.user_create_world_instance_success },
            |m: &mut UdpMsgDown| { &mut m.user_create_world_instance_success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UdpMsgDownAreaInit>(
            "area_init",
            |m: &UdpMsgDown| { &m.area_init },
            |m: &mut UdpMsgDown| { &mut m.area_init },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpMsgDown>(
            "UdpMsgDown",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpMsgDown {
    const NAME: &'static str = "UdpMsgDown";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self._type = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.game_entity_update)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.game_entity_removed)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.user_connect_failed)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.user_create_world_instance_success)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.area_init)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self._type != ::protobuf::EnumOrUnknown::new(UdpMsgDownType::GAME_ENTITY_UPDATE) {
            my_size += ::protobuf::rt::int32_size(1, self._type.value());
        }
        if let Some(v) = self.game_entity_update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.game_entity_removed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.user_connect_failed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.user_create_world_instance_success.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.area_init.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self._type != ::protobuf::EnumOrUnknown::new(UdpMsgDownType::GAME_ENTITY_UPDATE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self._type))?;
        }
        if let Some(v) = self.game_entity_update.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.game_entity_removed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.user_connect_failed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.user_create_world_instance_success.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.area_init.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpMsgDown {
        UdpMsgDown::new()
    }

    fn clear(&mut self) {
        self._type = ::protobuf::EnumOrUnknown::new(UdpMsgDownType::GAME_ENTITY_UPDATE);
        self.game_entity_update.clear();
        self.game_entity_removed.clear();
        self.user_connect_failed.clear();
        self.user_create_world_instance_success.clear();
        self.area_init.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpMsgDown {
        static instance: UdpMsgDown = UdpMsgDown {
            _type: ::protobuf::EnumOrUnknown::from_i32(0),
            game_entity_update: ::protobuf::MessageField::none(),
            game_entity_removed: ::protobuf::MessageField::none(),
            user_connect_failed: ::protobuf::MessageField::none(),
            user_create_world_instance_success: ::protobuf::MessageField::none(),
            area_init: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpMsgDown {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpMsgDown").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpMsgDown {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpMsgDown {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UdpMsgDownWrapper)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpMsgDownWrapper {
    // message fields
    // @@protoc_insertion_point(field:UdpMsgDownWrapper.server_time)
    pub server_time: u64,
    // @@protoc_insertion_point(field:UdpMsgDownWrapper.messages)
    pub messages: ::std::vec::Vec<UdpMsgDown>,
    // special fields
    // @@protoc_insertion_point(special_field:UdpMsgDownWrapper.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpMsgDownWrapper {
    fn default() -> &'a UdpMsgDownWrapper {
        <UdpMsgDownWrapper as ::protobuf::Message>::default_instance()
    }
}

impl UdpMsgDownWrapper {
    pub fn new() -> UdpMsgDownWrapper {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_time",
            |m: &UdpMsgDownWrapper| { &m.server_time },
            |m: &mut UdpMsgDownWrapper| { &mut m.server_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &UdpMsgDownWrapper| { &m.messages },
            |m: &mut UdpMsgDownWrapper| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpMsgDownWrapper>(
            "UdpMsgDownWrapper",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpMsgDownWrapper {
    const NAME: &'static str = "UdpMsgDownWrapper";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.server_time = is.read_uint64()?;
                },
                18 => {
                    self.messages.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.server_time != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.server_time);
        }
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.server_time != 0 {
            os.write_uint64(1, self.server_time)?;
        }
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpMsgDownWrapper {
        UdpMsgDownWrapper::new()
    }

    fn clear(&mut self) {
        self.server_time = 0;
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpMsgDownWrapper {
        static instance: UdpMsgDownWrapper = UdpMsgDownWrapper {
            server_time: 0,
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpMsgDownWrapper {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpMsgDownWrapper").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpMsgDownWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpMsgDownWrapper {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:UdpMsgDownType)
pub enum UdpMsgDownType {
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.GAME_ENTITY_UPDATE)
    GAME_ENTITY_UPDATE = 0,
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.GAME_ENTITY_REMOVED)
    GAME_ENTITY_REMOVED = 1,
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.USER_CONNECT_SUCCESS)
    USER_CONNECT_SUCCESS = 3,
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.USER_CONNECT_FAILED)
    USER_CONNECT_FAILED = 4,
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.USER_DISCONNECT_SUCCESS)
    USER_DISCONNECT_SUCCESS = 5,
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.USER_CREATE_WORDL_INSTANCE_SUCCESS)
    USER_CREATE_WORDL_INSTANCE_SUCCESS = 6,
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.USER_JOIN_WORDL_INSTANCE_SUCCESS)
    USER_JOIN_WORDL_INSTANCE_SUCCESS = 7,
    // @@protoc_insertion_point(enum_value:UdpMsgDownType.AREA_INIT)
    AREA_INIT = 8,
}

impl ::protobuf::Enum for UdpMsgDownType {
    const NAME: &'static str = "UdpMsgDownType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UdpMsgDownType> {
        match value {
            0 => ::std::option::Option::Some(UdpMsgDownType::GAME_ENTITY_UPDATE),
            1 => ::std::option::Option::Some(UdpMsgDownType::GAME_ENTITY_REMOVED),
            3 => ::std::option::Option::Some(UdpMsgDownType::USER_CONNECT_SUCCESS),
            4 => ::std::option::Option::Some(UdpMsgDownType::USER_CONNECT_FAILED),
            5 => ::std::option::Option::Some(UdpMsgDownType::USER_DISCONNECT_SUCCESS),
            6 => ::std::option::Option::Some(UdpMsgDownType::USER_CREATE_WORDL_INSTANCE_SUCCESS),
            7 => ::std::option::Option::Some(UdpMsgDownType::USER_JOIN_WORDL_INSTANCE_SUCCESS),
            8 => ::std::option::Option::Some(UdpMsgDownType::AREA_INIT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<UdpMsgDownType> {
        match str {
            "GAME_ENTITY_UPDATE" => ::std::option::Option::Some(UdpMsgDownType::GAME_ENTITY_UPDATE),
            "GAME_ENTITY_REMOVED" => ::std::option::Option::Some(UdpMsgDownType::GAME_ENTITY_REMOVED),
            "USER_CONNECT_SUCCESS" => ::std::option::Option::Some(UdpMsgDownType::USER_CONNECT_SUCCESS),
            "USER_CONNECT_FAILED" => ::std::option::Option::Some(UdpMsgDownType::USER_CONNECT_FAILED),
            "USER_DISCONNECT_SUCCESS" => ::std::option::Option::Some(UdpMsgDownType::USER_DISCONNECT_SUCCESS),
            "USER_CREATE_WORDL_INSTANCE_SUCCESS" => ::std::option::Option::Some(UdpMsgDownType::USER_CREATE_WORDL_INSTANCE_SUCCESS),
            "USER_JOIN_WORDL_INSTANCE_SUCCESS" => ::std::option::Option::Some(UdpMsgDownType::USER_JOIN_WORDL_INSTANCE_SUCCESS),
            "AREA_INIT" => ::std::option::Option::Some(UdpMsgDownType::AREA_INIT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [UdpMsgDownType] = &[
        UdpMsgDownType::GAME_ENTITY_UPDATE,
        UdpMsgDownType::GAME_ENTITY_REMOVED,
        UdpMsgDownType::USER_CONNECT_SUCCESS,
        UdpMsgDownType::USER_CONNECT_FAILED,
        UdpMsgDownType::USER_DISCONNECT_SUCCESS,
        UdpMsgDownType::USER_CREATE_WORDL_INSTANCE_SUCCESS,
        UdpMsgDownType::USER_JOIN_WORDL_INSTANCE_SUCCESS,
        UdpMsgDownType::AREA_INIT,
    ];
}

impl ::protobuf::EnumFull for UdpMsgDownType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("UdpMsgDownType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            UdpMsgDownType::GAME_ENTITY_UPDATE => 0,
            UdpMsgDownType::GAME_ENTITY_REMOVED => 1,
            UdpMsgDownType::USER_CONNECT_SUCCESS => 2,
            UdpMsgDownType::USER_CONNECT_FAILED => 3,
            UdpMsgDownType::USER_DISCONNECT_SUCCESS => 4,
            UdpMsgDownType::USER_CREATE_WORDL_INSTANCE_SUCCESS => 5,
            UdpMsgDownType::USER_JOIN_WORDL_INSTANCE_SUCCESS => 6,
            UdpMsgDownType::AREA_INIT => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for UdpMsgDownType {
    fn default() -> Self {
        UdpMsgDownType::GAME_ENTITY_UPDATE
    }
}

impl UdpMsgDownType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<UdpMsgDownType>("UdpMsgDownType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eudp-down.proto\x1a\x0ccommon.proto\"\xd4\x04\n\x1aUdpMsgDownGameEn\
    tityUpdate\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x124\n\x0bobject_ty\
    pe\x18\x02\x20\x01(\x0e2\x13.GameEntityBaseTypeR\nobjectType\x126\n\x10l\
    ocation_current\x18\x03\x20\x01(\x0b2\x06.PointH\0R\x0flocationCurrent\
    \x88\x01\x01\x12:\n\x15location_target_queue\x18\x04\x20\x03(\x0b2\x06.P\
    ointR\x13locationTargetQueue\x12*\n\x0evelocity_speed\x18\x05\x20\x01(\
    \x02H\x01R\rvelocitySpeed\x88\x01\x01\x12<\n\x14collider_dmg_in_rect\x18\
    \x06\x20\x01(\x0b2\x06.PointH\x02R\x11colliderDmgInRect\x88\x01\x01\x127\
    \n\x11collider_mvt_rect\x18\x07\x20\x01(\x0b2\x06.PointH\x03R\x0fcollide\
    rMvtRect\x88\x01\x01\x12*\n\x0ehealth_current\x18\x08\x20\x01(\rH\x04R\r\
    healthCurrent\x88\x01\x01\x12\x17\n\x07is_self\x18\t\x20\x01(\x08R\x06is\
    Self\x12!\n\x04cast\x18\n\x20\x01(\x0b2\x08.UdpCastH\x05R\x04cast\x88\
    \x01\x01B\x13\n\x11_location_currentB\x11\n\x0f_velocity_speedB\x17\n\
    \x15_collider_dmg_in_rectB\x14\n\x12_collider_mvt_rectB\x11\n\x0f_health\
    _currentB\x07\n\x05_cast\"f\n\x07UdpCast\x12\x1f\n\x05spell\x18\x01\x20\
    \x01(\x0e2\t.UdpSpellR\x05spell\x12\x1e\n\x06target\x18\x02\x20\x01(\x0b\
    2\x06.PointR\x06target\x12\x1a\n\x08duration\x18\x03\x20\x01(\rR\x08dura\
    tion\"-\n\x1bUdpMsgDownGameEntityRemoved\x12\x0e\n\x02id\x18\x01\x20\x01\
    (\rR\x02id\"B\n\x1bUdpMsgDownUserConnectFailed\x12#\n\rerror_message\x18\
    \x01\x20\x01(\tR\x0cerrorMessage\":\n(UdpMsgDownUserCreateWorldInstanceS\
    uccess\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\x80\x01\n\x12UdpMsgDo\
    wnAreaInit\x12\x14\n\x05width\x18\x01\x20\x01(\x02R\x05width\x12\x16\n\
    \x06height\x18\x02\x20\x01(\x02R\x06height\x12\x1d\n\nwalkable_x\x18\x03\
    \x20\x03(\rR\twalkableX\x12\x1d\n\nwalkable_y\x18\x04\x20\x03(\rR\twalka\
    bleY\"\xd7\x04\n\nUdpMsgDown\x12$\n\x05_type\x18\x01\x20\x01(\x0e2\x0f.U\
    dpMsgDownTypeR\x04Type\x12N\n\x12game_entity_update\x18\x02\x20\x01(\x0b\
    2\x1b.UdpMsgDownGameEntityUpdateH\0R\x10gameEntityUpdate\x88\x01\x01\x12\
    Q\n\x13game_entity_removed\x18\x03\x20\x01(\x0b2\x1c.UdpMsgDownGameEntit\
    yRemovedH\x01R\x11gameEntityRemoved\x88\x01\x01\x12Q\n\x13user_connect_f\
    ailed\x18\x04\x20\x01(\x0b2\x1c.UdpMsgDownUserConnectFailedH\x02R\x11use\
    rConnectFailed\x88\x01\x01\x12z\n\"user_create_world_instance_success\
    \x18\x05\x20\x01(\x0b2).UdpMsgDownUserCreateWorldInstanceSuccessH\x03R\
    \x1euserCreateWorldInstanceSuccess\x88\x01\x01\x125\n\tarea_init\x18\x06\
    \x20\x01(\x0b2\x13.UdpMsgDownAreaInitH\x04R\x08areaInit\x88\x01\x01B\x15\
    \n\x13_game_entity_updateB\x16\n\x14_game_entity_removedB\x16\n\x14_user\
    _connect_failedB%\n#_user_create_world_instance_successB\x0c\n\n_area_in\
    it\"]\n\x11UdpMsgDownWrapper\x12\x1f\n\x0bserver_time\x18\x01\x20\x01(\
    \x04R\nserverTime\x12'\n\x08messages\x18\x02\x20\x03(\x0b2\x0b.UdpMsgDow\
    nR\x08messages*\xee\x01\n\x0eUdpMsgDownType\x12\x16\n\x12GAME_ENTITY_UPD\
    ATE\x10\0\x12\x17\n\x13GAME_ENTITY_REMOVED\x10\x01\x12\x18\n\x14USER_CON\
    NECT_SUCCESS\x10\x03\x12\x17\n\x13USER_CONNECT_FAILED\x10\x04\x12\x1b\n\
    \x17USER_DISCONNECT_SUCCESS\x10\x05\x12&\n\"USER_CREATE_WORDL_INSTANCE_S\
    UCCESS\x10\x06\x12$\n\x20USER_JOIN_WORDL_INSTANCE_SUCCESS\x10\x07\x12\r\
    \n\tAREA_INIT\x10\x08b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(UdpMsgDownGameEntityUpdate::generated_message_descriptor_data());
            messages.push(UdpCast::generated_message_descriptor_data());
            messages.push(UdpMsgDownGameEntityRemoved::generated_message_descriptor_data());
            messages.push(UdpMsgDownUserConnectFailed::generated_message_descriptor_data());
            messages.push(UdpMsgDownUserCreateWorldInstanceSuccess::generated_message_descriptor_data());
            messages.push(UdpMsgDownAreaInit::generated_message_descriptor_data());
            messages.push(UdpMsgDown::generated_message_descriptor_data());
            messages.push(UdpMsgDownWrapper::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(UdpMsgDownType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
