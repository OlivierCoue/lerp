use app::auth::*;
use bevy::{
    prelude::*,
    sprite::{MaterialMesh2dBundle, Mesh2dHandle, Wireframe2dConfig, Wireframe2dPlugin},
};
use common::*;

mod app;
mod common;

#[derive(Component)]
struct LobbySceneTag;

// fn auth_scene_setup(mut commands: Commands) {
//     // Example: Display an "Auth" UI
//     commands.spawn(Camera2dBundle::default());
//     commands.spawn(TextBundle::from_section(
//         "Authentication Scene",
//         TextStyle::default(),
//     ));
// }

// fn auth_scene_logic(mut state: ResMut<NextState<GameScene>>, keyboard: Res<ButtonInput<KeyCode>>) {
//     if keyboard.just_pressed(KeyCode::Enter) {
//         // Transition to the Login state when Enter is pressed
//         state.set(GameScene::Auth);
//     }
// }

// fn cleanup_auth_scene(mut commands: Commands, query: Query<Entity, With<Text>>) {
//     // Clean up entities from the Auth scene
//     for entity in query.iter() {
//         commands.entity(entity).despawn();
//     }
// }

// #[derive(Component)]
// struct Person;

// #[derive(Component)]
// struct Name(String);

// #[derive(Component)]
// struct Player;

// #[derive(Resource)]
// struct GreetTimer(Timer);

// fn setup(
//     mut commands: Commands,
//     mut meshes: ResMut<Assets<Mesh>>,
//     mut materials: ResMut<Assets<ColorMaterial>>,
// ) {
//     commands.spawn(Camera2dBundle::default());

//     let circle = Mesh2dHandle(meshes.add(Circle { radius: 50.0 }));
//     let color = Color::linear_rgba(0.0, 0.0, 0.0, 1.0);

//     commands.spawn((
//         Player,
//         MaterialMesh2dBundle {
//             mesh: circle,
//             material: materials.add(color),
//             transform: Transform::from_xyz(900.0, 0.0, 0.0),
//             ..default()
//         },
//     ));

//     commands.spawn(
//         TextBundle::from_section("Press space to toggle wireframes", TextStyle::default())
//             .with_style(Style {
//                 position_type: PositionType::Absolute,
//                 top: Val::Px(12.0),
//                 left: Val::Px(12.0),
//                 ..default()
//             }),
//     );
// }

fn setup() {
    println!("Setup")
}

fn transition_to_auth_scene(mut app_state: ResMut<NextState<GameScene>>) {
    app_state.set(GameScene::Auth);
}

fn lobby_scene_setup(mut commands: Commands) {
    println!("[lobby_scene_setup]");
    // Example: Display an "Auth" UI
    commands.spawn((LobbySceneTag, Camera2dBundle::default()));
    commands.spawn((
        LobbySceneTag,
        TextBundle::from_section("Lobby Scene", TextStyle::default()),
    ));
}

fn lobby_scene_logic(
    mut app_state: ResMut<NextState<GameScene>>,
    keyboard: Res<ButtonInput<KeyCode>>,
) {
    if keyboard.just_pressed(KeyCode::Enter) {
        // Transition to the Auth state when Enter is pressed
        app_state.set(GameScene::Auth);
    }
}

fn lobby_scene_cleanup(mut commands: Commands, query: Query<Entity, With<LobbySceneTag>>) {
    println!("[lobby_scene_cleanup]");
    // Clean up entities from the Lobby scene
    for entity in query.iter() {
        commands.entity(entity).despawn();
    }
}

// fn auth_scene_logic(mut state: ResMut<NextState<GameScene>>, keyboard: Res<ButtonInput<KeyCode>>) {
//     if keyboard.just_pressed(KeyCode::Enter) {
//         // Transition to the Login state when Enter is pressed
//         state.set(GameScene::Auth);
//     }
// }

// fn toggle_wireframe(
//     mut wireframe_config: ResMut<Wireframe2dConfig>,
//     keyboard: Res<ButtonInput<KeyCode>>,
// ) {
//     if keyboard.just_pressed(KeyCode::Space) {
//         wireframe_config.global = !wireframe_config.global;
//     }
// }

// fn add_people(mut commands: Commands) {
//     commands.spawn((Person, Name("Elaina Proctor".to_string())));
//     commands.spawn((Person, Name("Renzo Hume".to_string())));
//     commands.spawn((Person, Name("Zayna Nieves".to_string())));
// }

// fn greet_people(time: Res<Time>, mut timer: ResMut<GreetTimer>, query: Query<&Name, With<Person>>) {
//     // update our timer with the time elapsed since the last update
//     // if that caused the timer to finish, we say hello to everyone
//     if timer.0.tick(time.delta()).just_finished() {
//         for name in &query {
//             println!("hello {}!", name.0);
//         }
//     }
// }

// fn update_people(mut query: Query<&mut Name, With<Person>>) {
//     for mut name in &mut query {
//         if name.0 == "Elaina Proctor" {
//             name.0 = "Elaina Hume".to_string();
//             break; // We don't need to change any other names.
//         }
//     }
// }

// fn update_player(
//     time: Res<Time>,
//     keyboard: Res<ButtonInput<KeyCode>>,
//     mut query: Query<&mut Transform, With<Player>>,
// ) {
//     let speed = 200.0;
//     for mut transform in &mut query {
//         if keyboard.pressed(KeyCode::ArrowLeft) {
//             transform.translation.x -= speed * time.delta_seconds();
//         } else if keyboard.pressed(KeyCode::ArrowRight) {
//             transform.translation.x += speed * time.delta_seconds();
//         } else if keyboard.pressed(KeyCode::ArrowDown) {
//             transform.translation.y -= speed * time.delta_seconds();
//         } else if keyboard.pressed(KeyCode::ArrowUp) {
//             transform.translation.y += speed * time.delta_seconds();
//         }
//     }
// }

pub struct LerpPlugin;

impl Plugin for LerpPlugin {
    fn build(&self, app: &mut App) {
        app.init_state::<GameScene>();

        app.add_systems(OnEnter(GameScene::Setup), setup);
        app.add_systems(
            Update,
            transition_to_auth_scene.run_if(in_state(GameScene::Setup)),
        );

        app.add_systems(OnEnter(GameScene::Auth), auth_scene_setup);
        app.add_systems(Update, auth_scene_logic.run_if(in_state(GameScene::Auth)));
        app.add_systems(
            Update,
            auth_scene_button_logic.run_if(in_state(GameScene::Auth)),
        );
        app.add_systems(OnExit(GameScene::Auth), auth_scene_cleanup);

        app.add_systems(OnEnter(GameScene::Lobby), lobby_scene_setup);
        app.add_systems(Update, lobby_scene_logic.run_if(in_state(GameScene::Lobby)));
        app.add_systems(OnExit(GameScene::Lobby), lobby_scene_cleanup);
    }
}

fn main() {
    App::new()
        .add_plugins((DefaultPlugins, Wireframe2dPlugin))
        .add_plugins(LerpPlugin)
        .run();
}
