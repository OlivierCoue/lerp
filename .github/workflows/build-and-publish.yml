name: build-and-publish
run-name: build-and-publish
on:
  push:
    branches:
      - dev
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # or 'nightly' / '1.72.0', etc.
          profile: minimal
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-


      - name: Update and install required libraries
        run: |
          sudo apt-get update
          sudo apt-get -y install --no-install-recommends \
            libasound2-dev \
            libudev-dev

      - name: Copy .env
        shell: bash
        run: cp .env.pipeline .env

      # - name: Install Rust
      #   shell: bash
      #   run: sudo apt install rustc

      # - name: Install Cargo Lambda
      #   uses: jaxxstorm/action-install-gh-release@v1.11.0
      #   with:
      #     repo: cargo-lambda/cargo-lambda
      #     platform: linux
      #     arch: x86_64

      # - name: Build lambda
      #   shell: bash
      #   run: cargo lambda build --compiler cargo --release --output-format zip

      - name: Build lerp-server-game
        shell: bash
        run: ./lerp-server-game/build-release.sh

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-3
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-build-and-publish

      # - name: Publish lambda auth to AWS S3 
      #   shell: bash
      #   run: aws s3 cp ./target/lambda/rust-lambda-auth/bootstrap.zip s3://lambda-artefacts-${{ github.ref_name }}/auth/

      # - name: Publish lambda lobby to AWS S3 
      #   shell: bash
      #   run: aws s3 cp ./target/lambda/rust-lambda-lobby/bootstrap.zip s3://lambda-artefacts-${{ github.ref_name }}/lobby/

      # - name: Publish lambda scaler to AWS S3 
      #   shell: bash
      #   run: aws s3 cp ./target/lambda/rust-lambda-scaler/bootstrap.zip s3://lambda-artefacts-${{ github.ref_name }}/scaler/

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push game docker image to AWS ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: game-${{ github.ref_name }}
          IMAGE_TAG: latest
        run: |
          docker build ./lerp-server-game/dist/release -t $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG